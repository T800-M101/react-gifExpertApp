{"version":3,"sources":["components/AddCategory.jsx","components/GifGridItem.jsx","helpers/getGifs.js","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","categories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","Set","console","log","handleSubmit","type","value","onChange","target","handleInputChange","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","res","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"6MAuDeA,EAnDK,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,WAGnC,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KA6BC,OAEI,sBAAMC,SAAU,SAACC,GAAD,OAvBA,SAACA,GAClBA,EAAEC,iBAKCJ,EAAWK,OAAOC,OAAS,IAGzBT,GAAc,SAACC,GAAD,OAAiBE,GAAjB,mBAAgCF,OAC9CD,GAAc,SAACC,GAAD,mBAAoB,IAAIS,IAAIT,OAG1CU,QAAQC,IAAIX,GACZG,EAAc,KASKS,CAAaP,IAApC,SACI,uBACKQ,KAAK,OACLC,MAAOZ,EACPa,SAAU,SAACV,GAAD,OAhCE,SAACA,GAC1BF,EAAcE,EAAEW,OAAOF,OA+BMG,CAAkBZ,S,QC3BpCa,EAbK,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAK7B,OACI,sBAAKC,UAAU,oDAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAI,UACnB,4BAAIJ,Q,uBCLHK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEjBN,EAFiB,iDAE+BO,UAAUF,GAFzC,6BAFP,oCAEO,SAGLG,MAAMR,GAHD,cAGjBS,EAHiB,gBAIAA,EAAIC,OAJJ,uBAIfC,EAJe,EAIfA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHhB,GAAGgB,EAAIhB,GACPC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAVnB,kBAchBY,GAdgB,4CAAH,sDCiCLK,EAhCC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAMf,ECRwB,SAACA,GACzB,MAA0BzB,mBAAS,CAC/B+B,KAAK,GACLO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbDC,qBAAW,WACRjB,EAAQC,GACHiB,MAAK,SAAAP,GACF1B,QAAQC,IAAIyB,GACZK,EAAS,CACLT,KAAKI,EACLG,SAAS,SAGtB,CAACb,IAIKc,EDX2BI,CAAalB,GAAjCU,EAAd,EAASJ,KAAT,EAAsBO,QAKtB,OACI,qCACA,6BAAKb,IAEL,qBAAKJ,UAAU,YAAf,SAGUc,EAAOF,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAEaA,GADCA,EAAIhB,aEezB0B,EApCM,WAEjB,IAEA,EAAoC5C,mBAFd,CAAC,cAEvB,mBAAOD,EAAP,KAAmBD,EAAnB,KAQF,OACE,gCACI,8CACA,cAAC,EAAD,CACWA,cAAiBA,EACjBC,WAAYA,IACvB,uBAEA,6BAEQA,EAAWkC,KAAK,SAAAR,GAAQ,OACpB,cAAC,EAAD,CAEOA,SAAUA,GADLA,YCtBhCoB,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.4bdd68cc.chunk.js","sourcesContent":["import React, { useState }from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst AddCategory = ( {setCategories, categories}) => {\n\n\n   const [inputValue, setInputValue] = useState('');\n   \n   \n   const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n   }\n\n\n   const handleSubmit = (e) => {\n       e.preventDefault();\n       \n\n     \n\n       if(inputValue.trim().length > 0 ){\n           \n           //Se pasa como parametros el estado del array y se retorna el nuevo estado del array mediante una arrow function\n            setCategories((categories) => [inputValue, ...categories ]);\n            setCategories((categories) => [...new Set(categories)]);\n\n           \n            console.log(categories);\n            setInputValue('');\n       }\n\n   }\n\n\n\n    return (\n        \n        <form onSubmit={(e) => handleSubmit(e)}>\n            <input \n                 type=\"text\"\n                 value={inputValue} \n                 onChange={(e)=> handleInputChange(e)}\n            />\n        </form>\n    \n    )\n}\n\n  // Para hacer obligatorio en las props la fuuncion de serCategories;\n  AddCategory.propTypes = {\n      setCategories: PropTypes.func.isRequired,\n      categories:PropTypes.array.isRequired\n      \n  }\nexport default AddCategory;\n","import React from 'react';\n\nconst GifGridItem = ({id, title, url}) => {\n\n   \n\n\n    return (\n        <div className=\"card animate__animated animate__lightSpeedInRight\">\n            <img src={url} alt=\"title\" />\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default GifGridItem;\n","\n\n/*METHOD TO GET LIST OF GIFS*/\nconst API_KEY = 'wjlRfMD5ufAjByBqxXyXgKTIDnAhK2zq';\n\nexport const getGifs = async(category) => {\n\nconst url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${API_KEY}`;\nconst res = await fetch(url);\nconst { data } = await res.json();\n\nconst gifs = data.map(img => {\n    return {\n        id:img.id,\n        title: img.title,\n        url: img.images?.downsized_medium.url\n    }\n})\n\nreturn gifs;\n\n}","import React from 'react';\nimport GifGridItem from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\n\n\nconst GifGrid = ({ category }) => {\n\n     \n   /* ================== HOOKS ============================*/\n    \n\n    const {  data:images, loading } = useFetchGifs(category);\n   \n\n  /*=================================================*/ \n\n    return (\n        <>\n        <h3>{category}</h3>\n        \n        <div className=\"card-grid\">\n            \n              {\n                  images.map( (img) => (\n                      <GifGridItem \n                               key={img.id}\n                               {...img }\n                     />\n                  ))\n              }\n            \n         \n        </div>\n        </>\n    )\n}\n\nexport default GifGrid;\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data:[],\n        loading: true\n    });\n\n   useEffect( () => {\n      getGifs(category)\n          .then(images => {\n              console.log(images);\n              setState({\n                  data:images,\n                  loading: false\n              });\n          })   \n   },[category])\n\n  \n\n    return state;\n}\n\n\n\n\n\n","import React, {useState}  from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\n\nconst GifExpertApp = () => {\n\n    const categoriesArr = ['One Punch'];\n\n    const [categories, setCategories] = useState(categoriesArr);\n\n    //Se pasa como parametros el estado del array y se retorna el nuevo estado del array mediante una arrow function\n    // const handleAdd = () => {\n    //     setCategories((categories) => [...categories, 'Avengers'] )\n    // }\n   \n\n  return (\n    <div>\n        <h2>GifExpertApp</h2>\n        <AddCategory \n                   setCategories = {setCategories}\n                   categories={categories}/>\n        <hr />\n       \n        <ol>\n            {\n                categories.map( category => (\n                    <GifGrid \n                           key={category}\n                           category={category}\n                    />\n                ))\n            }\n        </ol>\n    </div>\n  )\n  }\n\n  \n\nexport default GifExpertApp;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GifExpertApp from './GifExpertApp.jsx';\n\n\nReactDOM.render(\n\n    <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}